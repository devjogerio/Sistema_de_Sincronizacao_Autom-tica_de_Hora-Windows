"""
Sistema de notifica√ß√µes por email para alertas de monitoramento NTP.
Implementa envio configur√°vel de emails com templates e condi√ß√µes personaliz√°veis.
"""

import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import logging
from dataclasses import dataclass
import json
import os
from config_manager import ConfigManager

# Configura√ß√£o de logging
logger = logging.getLogger(__name__)

@dataclass
class AlertCondition:
    """
    Representa uma condi√ß√£o de alerta configur√°vel.
    """
    name: str
    condition_type: str  # 'availability', 'response_time', 'offset', 'custom'
    threshold: float
    operator: str  # '>', '<', '>=', '<=', '=='
    duration_minutes: int = 5  # Dura√ß√£o m√≠nima da condi√ß√£o
    enabled: bool = True
    
    def check_condition(self, value: float) -> bool:
        """
        Verifica se a condi√ß√£o √© atendida.
        
        Args:
            value: Valor a ser verificado
            
        Returns:
            bool: True se a condi√ß√£o for atendida
        """
        try:
            if self.operator == '>':
                return value > self.threshold
            elif self.operator == '<':
                return value < self.threshold
            elif self.operator == '>=':
                return value >= self.threshold
            elif self.operator == '<=':
                return value <= self.threshold
            elif self.operator == '==':
                return value == self.threshold
            else:
                logger.warning(f"Operador desconhecido: {self.operator}")
                return False
        except Exception as e:
            logger.error(f"Erro ao verificar condi√ß√£o {self.name}: {e}")
            return False

@dataclass
class EmailConfig:
    """
    Configura√ß√£o de email para notifica√ß√µes.
    """
    smtp_server: str
    smtp_port: int
    username: str
    password: str
    sender_email: str
    sender_name: str = "NTP Monitor"
    use_tls: bool = True
    use_ssl: bool = False
    
    def validate(self) -> bool:
        """
        Valida a configura√ß√£o de email.
        
        Returns:
            bool: True se a configura√ß√£o √© v√°lida
        """
        required_fields = [
            self.smtp_server, self.smtp_port, self.username,
            self.password, self.sender_email
        ]
        
        return all(field for field in required_fields)

class EmailNotifier:
    """
    Sistema de notifica√ß√µes por email para alertas NTP.
    """
    
    def __init__(self, config_manager: ConfigManager):
        """
        Inicializa o notificador de email.
        
        Args:
            config_manager: Gerenciador de configura√ß√µes
        """
        self.config_manager = config_manager
        self.email_config = config_manager.email
        self.alert_conditions = self._load_alert_conditions()
        self.alert_history = {}  # Hist√≥rico de alertas por servidor
        self.cooldown_periods = {}  # Per√≠odos de cooldown por tipo de alerta
        
        # Templates de email
        self.templates = {
            'availability': self._get_availability_template(),
            'response_time': self._get_response_time_template(),
            'offset': self._get_offset_template(),
            'server_down': self._get_server_down_template(),
            'server_recovered': self._get_server_recovered_template(),
            'summary': self._get_summary_template()
        }
    
    def _load_alert_conditions(self) -> List[AlertCondition]:
        """
        Carrega condi√ß√µes de alerta da configura√ß√£o.
        
        Returns:
            List[AlertCondition]: Lista de condi√ß√µes de alerta
        """
        conditions = []
        
        # Condi√ß√µes padr√£o baseadas na configura√ß√£o
        alert_config = self.config_manager.alerts
        
        # Disponibilidade baixa
        if alert_config.availability_threshold > 0:
            conditions.append(AlertCondition(
                name="low_availability",
                condition_type="availability",
                threshold=alert_config.availability_threshold,
                operator="<",
                duration_minutes=alert_config.alert_cooldown_minutes,
                enabled=True
            ))
        
        # Tempo de resposta alto
        if alert_config.slow_response_threshold > 0:
            conditions.append(AlertCondition(
                name="high_response_time",
                condition_type="response_time",
                threshold=alert_config.slow_response_threshold,
                operator=">",
                duration_minutes=alert_config.alert_cooldown_minutes,
                enabled=True
            ))
        
        # Offset alto
        if alert_config.high_offset_threshold > 0:
            conditions.append(AlertCondition(
                name="high_offset",
                condition_type="offset",
                threshold=alert_config.high_offset_threshold,
                operator=">",
                duration_minutes=alert_config.alert_cooldown_minutes,
                enabled=True
            ))
        
        return conditions
    
    def _get_availability_template(self) -> str:
        """Template para alertas de disponibilidade."""
        return """
        <html>
        <body>
            <h2 style="color: #d32f2f;">‚ö†Ô∏è Alerta de Disponibilidade NTP</h2>
            <p><strong>Servidor:</strong> {server_address}</p>
            <p><strong>Disponibilidade:</strong> {availability}%</p>
            <p><strong>Limite:</strong> {threshold}%</p>
            <p><strong>Data/Hora:</strong> {timestamp}</p>
            <p><strong>Dura√ß√£o:</strong> {duration} minutos</p>
            
            <h3>Detalhes:</h3>
            <ul>
                <li>Verifica√ß√µes totais: {total_checks}</li>
                <li>Verifica√ß√µes bem-sucedidas: {successful_checks}</li>
                <li>Verifica√ß√µes falhadas: {failed_checks}</li>
            </ul>
            
            <p style="color: #666; font-size: 12px;">
                Este alerta foi gerado automaticamente pelo sistema de monitoramento NTP.
            </p>
        </body>
        </html>
        """
    
    def _get_response_time_template(self) -> str:
        """Template para alertas de tempo de resposta."""
        return """
        <html>
        <body>
            <h2 style="color: #ff9800;">‚è±Ô∏è Alerta de Tempo de Resposta NTP</h2>
            <p><strong>Servidor:</strong> {server_address}</p>
            <p><strong>Tempo de Resposta:</strong> {response_time}ms</p>
            <p><strong>Limite:</strong> {threshold}ms</p>
            <p><strong>Data/Hora:</strong> {timestamp}</p>
            
            <h3>M√©tricas Recentes:</h3>
            <ul>
                <li>Tempo m√©dio: {avg_response_time}ms</li>
                <li>Tempo m√≠nimo: {min_response_time}ms</li>
                <li>Tempo m√°ximo: {max_response_time}ms</li>
            </ul>
            
            <p style="color: #666; font-size: 12px;">
                Este alerta foi gerado automaticamente pelo sistema de monitoramento NTP.
            </p>
        </body>
        </html>
        """
    
    def _get_offset_template(self) -> str:
        """Template para alertas de offset."""
        return """
        <html>
        <body>
            <h2 style="color: #f44336;">üïê Alerta de Sincroniza√ß√£o NTP</h2>
            <p><strong>Servidor:</strong> {server_address}</p>
            <p><strong>Offset:</strong> {offset}ms</p>
            <p><strong>Limite:</strong> {threshold}ms</p>
            <p><strong>Data/Hora:</strong> {timestamp}</p>
            
            <h3>Informa√ß√µes de Sincroniza√ß√£o:</h3>
            <ul>
                <li>Delay: {delay}ms</li>
                <li>Stratum: {stratum}</li>
                <li>Precis√£o: {precision}</li>
            </ul>
            
            <p style="color: #666; font-size: 12px;">
                Este alerta foi gerado automaticamente pelo sistema de monitoramento NTP.
            </p>
        </body>
        </html>
        """
    
    def _get_server_down_template(self) -> str:
        """Template para servidor indispon√≠vel."""
        return """
        <html>
        <body>
            <h2 style="color: #d32f2f;">üî¥ Servidor NTP Indispon√≠vel</h2>
            <p><strong>Servidor:</strong> {server_address}</p>
            <p><strong>Status:</strong> Indispon√≠vel</p>
            <p><strong>Data/Hora:</strong> {timestamp}</p>
            <p><strong>Erro:</strong> {error_message}</p>
            
            <h3>A√ß√µes Recomendadas:</h3>
            <ul>
                <li>Verificar conectividade de rede</li>
                <li>Confirmar se o servidor est√° operacional</li>
                <li>Considerar usar servidor alternativo</li>
            </ul>
            
            <p style="color: #666; font-size: 12px;">
                Este alerta foi gerado automaticamente pelo sistema de monitoramento NTP.
            </p>
        </body>
        </html>
        """
    
    def _get_server_recovered_template(self) -> str:
        """Template para recupera√ß√£o de servidor."""
        return """
        <html>
        <body>
            <h2 style="color: #4caf50;">‚úÖ Servidor NTP Recuperado</h2>
            <p><strong>Servidor:</strong> {server_address}</p>
            <p><strong>Status:</strong> Operacional</p>
            <p><strong>Data/Hora:</strong> {timestamp}</p>
            <p><strong>Tempo Indispon√≠vel:</strong> {downtime} minutos</p>
            
            <h3>M√©tricas Atuais:</h3>
            <ul>
                <li>Tempo de resposta: {response_time}ms</li>
                <li>Offset: {offset}ms</li>
                <li>Disponibilidade: {availability}%</li>
            </ul>
            
            <p style="color: #666; font-size: 12px;">
                Este alerta foi gerado automaticamente pelo sistema de monitoramento NTP.
            </p>
        </body>
        </html>
        """
    
    def _get_summary_template(self) -> str:
        """Template para relat√≥rio resumo."""
        return """
        <html>
        <body>
            <h2 style="color: #2196f3;">üìä Relat√≥rio de Monitoramento NTP</h2>
            <p><strong>Per√≠odo:</strong> {period}</p>
            <p><strong>Gerado em:</strong> {timestamp}</p>
            
            <h3>Resumo Geral:</h3>
            <ul>
                <li>Total de servidores: {total_servers}</li>
                <li>Disponibilidade m√©dia: {avg_availability}%</li>
                <li>Tempo de resposta m√©dio: {avg_response_time}ms</li>
                <li>Offset m√©dio: {avg_offset}ms</li>
            </ul>
            
            <h3>Top Servidores por Disponibilidade:</h3>
            <ol>
                {top_availability_servers}
            </ol>
            
            <h3>Alertas no Per√≠odo:</h3>
            <ul>
                {alerts_summary}
            </ul>
            
            <p style="color: #666; font-size: 12px;">
                Este relat√≥rio foi gerado automaticamente pelo sistema de monitoramento NTP.
            </p>
        </body>
        </html>
        """
    
    def check_and_send_alerts(self, server_metrics: Dict[str, Dict]) -> List[str]:
        """
        Verifica condi√ß√µes de alerta e envia notifica√ß√µes.
        
        Args:
            server_metrics: M√©tricas dos servidores
            
        Returns:
            List[str]: Lista de alertas enviados
        """
        sent_alerts = []
        
        try:
            for server_address, metrics in server_metrics.items():
                for condition in self.alert_conditions:
                    if not condition.enabled:
                        continue
                    
                    # Obt√©m valor da m√©trica
                    value = self._get_metric_value(metrics, condition.condition_type)
                    
                    if value is None:
                        continue
                    
                    # Verifica se a condi√ß√£o √© atendida
                    if condition.check_condition(value):
                        # Verifica cooldown
                        if self._is_in_cooldown(server_address, condition.name):
                            continue
                        
                        # Envia alerta
                        if self._send_alert_email(server_address, condition, metrics, value):
                            sent_alerts.append(f"{server_address}:{condition.name}")
                            self._update_cooldown(server_address, condition.name)
                    
                    else:
                        # Verifica se houve recupera√ß√£o
                        if self._check_recovery(server_address, condition.name):
                            if self._send_recovery_email(server_address, condition, metrics):
                                sent_alerts.append(f"{server_address}:recovered")
            
            return sent_alerts
            
        except Exception as e:
            logger.error(f"Erro ao verificar e enviar alertas: {e}")
            return []
    
    def _get_metric_value(self, metrics: Dict, condition_type: str) -> Optional[float]:
        """
        Obt√©m valor da m√©trica baseado no tipo de condi√ß√£o.
        
        Args:
            metrics: M√©tricas do servidor
            condition_type: Tipo de condi√ß√£o
            
        Returns:
            Optional[float]: Valor da m√©trica ou None
        """
        try:
            if condition_type == 'availability':
                return metrics.get('availability_percent', 0.0)
            elif condition_type == 'response_time':
                return (metrics.get('avg_response_time', 0.0) or 0.0) * 1000  # Converte para ms
            elif condition_type == 'offset':
                return abs(metrics.get('avg_offset', 0.0) or 0.0) * 1000  # Converte para ms
            else:
                return None
        except Exception as e:
            logger.error(f"Erro ao obter valor da m√©trica {condition_type}: {e}")
            return None
    
    def _is_in_cooldown(self, server_address: str, condition_name: str) -> bool:
        """
        Verifica se o alerta est√° em per√≠odo de cooldown.
        
        Args:
            server_address: Endere√ßo do servidor
            condition_name: Nome da condi√ß√£o
            
        Returns:
            bool: True se est√° em cooldown
        """
        key = f"{server_address}:{condition_name}"
        
        if key not in self.cooldown_periods:
            return False
        
        cooldown_until = self.cooldown_periods[key]
        return datetime.now() < cooldown_until
    
    def _update_cooldown(self, server_address: str, condition_name: str):
        """
        Atualiza per√≠odo de cooldown para um alerta.
        
        Args:
            server_address: Endere√ßo do servidor
            condition_name: Nome da condi√ß√£o
        """
        key = f"{server_address}:{condition_name}"
        cooldown_minutes = self.config_manager.alerts.alert_cooldown_minutes
        
        self.cooldown_periods[key] = datetime.now() + timedelta(minutes=cooldown_minutes)
    
    def _check_recovery(self, server_address: str, condition_name: str) -> bool:
        """
        Verifica se houve recupera√ß√£o de um alerta.
        
        Args:
            server_address: Endere√ßo do servidor
            condition_name: Nome da condi√ß√£o
            
        Returns:
            bool: True se houve recupera√ß√£o
        """
        key = f"{server_address}:{condition_name}"
        
        # Se estava em cooldown e agora n√£o est√° mais em condi√ß√£o de alerta
        if key in self.cooldown_periods:
            # Remove do cooldown para permitir nova verifica√ß√£o
            del self.cooldown_periods[key]
            return True
        
        return False
    
    def _send_alert_email(self, server_address: str, condition: AlertCondition, 
                         metrics: Dict, value: float) -> bool:
        """
        Envia email de alerta.
        
        Args:
            server_address: Endere√ßo do servidor
            condition: Condi√ß√£o de alerta
            metrics: M√©tricas do servidor
            value: Valor que disparou o alerta
            
        Returns:
            bool: True se o email foi enviado com sucesso
        """
        try:
            # Seleciona template baseado no tipo de condi√ß√£o
            template = self.templates.get(condition.condition_type, self.templates['availability'])
            
            # Prepara dados para o template
            template_data = {
                'server_address': server_address,
                'timestamp': datetime.now().strftime('%d/%m/%Y %H:%M:%S'),
                'threshold': condition.threshold,
                'duration': condition.duration_minutes,
                **metrics
            }
            
            # Adiciona dados espec√≠ficos do tipo de alerta
            if condition.condition_type == 'availability':
                template_data.update({
                    'availability': round(value, 2),
                    'total_checks': metrics.get('total_checks', 0),
                    'successful_checks': metrics.get('successful_checks', 0),
                    'failed_checks': metrics.get('total_checks', 0) - metrics.get('successful_checks', 0)
                })
            elif condition.condition_type == 'response_time':
                template_data.update({
                    'response_time': round(value, 2),
                    'avg_response_time': round((metrics.get('avg_response_time', 0) or 0) * 1000, 2),
                    'min_response_time': round((metrics.get('min_response_time', 0) or 0) * 1000, 2),
                    'max_response_time': round((metrics.get('max_response_time', 0) or 0) * 1000, 2)
                })
            elif condition.condition_type == 'offset':
                template_data.update({
                    'offset': round(value, 2),
                    'delay': round((metrics.get('avg_delay', 0) or 0) * 1000, 2),
                    'stratum': metrics.get('stratum', 'N/A'),
                    'precision': metrics.get('precision', 'N/A')
                })
            
            # Formata conte√∫do do email
            subject = f"üö® Alerta NTP: {condition.name.replace('_', ' ').title()} - {server_address}"
            body = template.format(**template_data)
            
            # Envia email
            return self._send_email(
                recipients=self.config_manager.email.recipients,
                subject=subject,
                body=body,
                is_html=True
            )
            
        except Exception as e:
            logger.error(f"Erro ao enviar email de alerta para {server_address}: {e}")
            return False
    
    def _send_recovery_email(self, server_address: str, condition: AlertCondition, 
                           metrics: Dict) -> bool:
        """
        Envia email de recupera√ß√£o.
        
        Args:
            server_address: Endere√ßo do servidor
            condition: Condi√ß√£o que foi recuperada
            metrics: M√©tricas atuais do servidor
            
        Returns:
            bool: True se o email foi enviado com sucesso
        """
        try:
            template = self.templates['server_recovered']
            
            template_data = {
                'server_address': server_address,
                'timestamp': datetime.now().strftime('%d/%m/%Y %H:%M:%S'),
                'downtime': condition.duration_minutes,
                'response_time': round((metrics.get('avg_response_time', 0) or 0) * 1000, 2),
                'offset': round(abs(metrics.get('avg_offset', 0) or 0) * 1000, 2),
                'availability': round(metrics.get('availability_percent', 0), 2)
            }
            
            subject = f"‚úÖ Recupera√ß√£o NTP: {server_address}"
            body = template.format(**template_data)
            
            return self._send_email(
                recipients=self.config_manager.email.recipients,
                subject=subject,
                body=body,
                is_html=True
            )
            
        except Exception as e:
            logger.error(f"Erro ao enviar email de recupera√ß√£o para {server_address}: {e}")
            return False
    
    def send_summary_report(self, report_data: Dict) -> bool:
        """
        Envia relat√≥rio resumo por email.
        
        Args:
            report_data: Dados do relat√≥rio
            
        Returns:
            bool: True se o email foi enviado com sucesso
        """
        try:
            template = self.templates['summary']
            
            # Formata lista de top servidores
            top_servers_html = ""
            for server_data in report_data.get('top_servers', {}).get('availability', []):
                top_servers_html += f"<li>{server_data['server']} - {server_data['availability']}%</li>"
            
            # Formata resumo de alertas (placeholder)
            alerts_html = "<li>Nenhum alerta cr√≠tico no per√≠odo</li>"
            
            template_data = {
                'period': f"{report_data.get('period_days', 7)} dias",
                'timestamp': datetime.now().strftime('%d/%m/%Y %H:%M:%S'),
                'total_servers': report_data.get('general_stats', {}).get('total_servers', 0),
                'avg_availability': report_data.get('general_stats', {}).get('avg_availability', 0),
                'avg_response_time': report_data.get('general_stats', {}).get('avg_response_time', 0),
                'avg_offset': report_data.get('general_stats', {}).get('avg_offset', 0),
                'top_availability_servers': top_servers_html,
                'alerts_summary': alerts_html
            }
            
            subject = f"üìä Relat√≥rio NTP - {datetime.now().strftime('%d/%m/%Y')}"
            body = template.format(**template_data)
            
            return self._send_email(
                recipients=self.config_manager.email.recipients,
                subject=subject,
                body=body,
                is_html=True
            )
            
        except Exception as e:
            logger.error(f"Erro ao enviar relat√≥rio resumo: {e}")
            return False
    
    def _send_email(self, recipients: List[str], subject: str, body: str, 
                   is_html: bool = False) -> bool:
        """
        Envia email usando configura√ß√£o SMTP.
        
        Args:
            recipients: Lista de destinat√°rios
            subject: Assunto do email
            body: Corpo do email
            is_html: Se o corpo √© HTML
            
        Returns:
            bool: True se o email foi enviado com sucesso
        """
        try:
            if not self.email_config.validate():
                logger.error("Configura√ß√£o de email inv√°lida")
                return False
            
            # Cria mensagem
            msg = MIMEMultipart('alternative')
            msg['From'] = f"{self.email_config.sender_name} <{self.email_config.sender_email}>"
            msg['To'] = ', '.join(recipients)
            msg['Subject'] = subject
            
            # Adiciona corpo da mensagem
            if is_html:
                msg.attach(MIMEText(body, 'html', 'utf-8'))
            else:
                msg.attach(MIMEText(body, 'plain', 'utf-8'))
            
            # Conecta ao servidor SMTP
            if self.email_config.use_ssl:
                context = ssl.create_default_context()
                server = smtplib.SMTP_SSL(
                    self.email_config.smtp_server, 
                    self.email_config.smtp_port, 
                    context=context
                )
            else:
                server = smtplib.SMTP(
                    self.email_config.smtp_server, 
                    self.email_config.smtp_port
                )
                
                if self.email_config.use_tls:
                    context = ssl.create_default_context()
                    server.starttls(context=context)
            
            # Autentica e envia
            server.login(self.email_config.username, self.email_config.password)
            server.send_message(msg, to_addrs=recipients)
            server.quit()
            
            logger.info(f"Email enviado com sucesso para {len(recipients)} destinat√°rios")
            return True
            
        except Exception as e:
            logger.error(f"Erro ao enviar email: {e}")
            return False
    
    def test_email_configuration(self) -> bool:
        """
        Testa a configura√ß√£o de email enviando um email de teste.
        
        Returns:
            bool: True se o teste foi bem-sucedido
        """
        try:
            test_subject = "üß™ Teste de Configura√ß√£o - NTP Monitor"
            test_body = """
            <html>
            <body>
                <h2>Teste de Configura√ß√£o de Email</h2>
                <p>Este √© um email de teste para verificar se as configura√ß√µes est√£o corretas.</p>
                <p><strong>Data/Hora:</strong> {timestamp}</p>
                <p>Se voc√™ recebeu este email, a configura√ß√£o est√° funcionando corretamente!</p>
            </body>
            </html>
            """.format(timestamp=datetime.now().strftime('%d/%m/%Y %H:%M:%S'))
            
            return self._send_email(
                recipients=self.config_manager.email.recipients,
                subject=test_subject,
                body=test_body,
                is_html=True
            )
            
        except Exception as e:
            logger.error(f"Erro no teste de configura√ß√£o de email: {e}")
            return False
    
    def add_custom_condition(self, condition: AlertCondition):
        """
        Adiciona uma condi√ß√£o de alerta personalizada.
        
        Args:
            condition: Nova condi√ß√£o de alerta
        """
        self.alert_conditions.append(condition)
        logger.info(f"Condi√ß√£o personalizada adicionada: {condition.name}")
    
    def test_email_connection(self) -> bool:
        """
        Testa a conex√£o com o servidor de email.
        
        Returns:
            bool: True se conex√£o for bem-sucedida
        """
        try:
            context = ssl.create_default_context()
            
            with smtplib.SMTP(self.email_config.smtp_server, self.email_config.smtp_port) as server:
                if self.email_config.use_tls:
                    server.starttls(context=context)
                
                server.login(self.email_config.username, self.email_config.password)
            
            logger.info("Teste de conex√£o de email bem-sucedido")
            return True
            
        except Exception as e:
            logger.error(f"Erro no teste de conex√£o de email: {e}")
            return False